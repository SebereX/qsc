#!/usr/bin/env python

import os
import sys
import numpy as np
from scipy.io import netcdf
import matplotlib.pyplot as plt

print()
print("Usage: ", os.path.basename(__file__), ' qsc_out.<extension>.nc')

if len(sys.argv) != 2:
   raise RuntimeError("A qsc_out.*.nc file must be provided as an argument")

filename = sys.argv[1]
bare_filename = os.path.basename(filename)
s = 'qsc_out.'
if bare_filename[:len(s)] != s or filename[-3:] != '.nc':
   raise RuntimeError("A qsc_out.*.nc file must be provided as an argument")
   
f = netcdf.netcdf_file(filename, 'r', mmap=False)
eta_bar = f.variables['iter_eta_bar'][()]
B2c = f.variables['iter_B2c'][()]
R0c = f.variables['iter_R0c'][()]
Z0s = f.variables['iter_Z0s'][()]

iota = f.variables['iter_iota'][()]
B20_variation = f.variables['iter_B20_variation'][()]
r_singularity = f.variables['iter_r_singularity'][()]
d2_volume_d_psi2 = f.variables['iter_d2_volume_d_psi2'][()]
L_grad_B = f.variables['iter_min_L_grad_B'][()]
L_grad_grad_B = f.variables['iter_min_L_grad_grad_B'][()]
elongation = f.variables['iter_max_elongation'][()]

objective_function = f.variables['iter_objective_function'][()]
B20_term = f.variables['iter_B20_term'][()]
iota_term = f.variables['iter_iota_term'][()]
R0_term = f.variables['iter_R0_term'][()]
d2_volume_d_psi2_term = f.variables['iter_d2_volume_d_psi2_term'][()]
XY2_term = f.variables['iter_XY2_term'][()]
XY2Prime_term = f.variables['iter_XY2Prime_term'][()]
XY3_term = f.variables['iter_XY3_term'][()]
XY3Prime_term = f.variables['iter_XY3Prime_term'][()]
grad_grad_B_term = f.variables['iter_grad_grad_B_term'][()]

axis_nmax_plus_1 = R0c.shape[1]
print("R0c.shape: ", R0c.shape)

iteration = np.array(range(len(objective_function)))

fig = plt.figure(figsize=(14,7))
plt.rcParams.update({'font.size': 7})

nrows = 3
ncols = 4
plotnum = 3
labelpad = -2


plt.subplot(nrows, ncols, plotnum); plotnum += 1
plt.plot(iteration, eta_bar, '.-')
plt.title('eta_bar')
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
plt.plot(iteration, B2c, '.-')
plt.title('B2c')
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
for n in range(axis_nmax_plus_1):
   plt.semilogy(iteration, np.abs(R0c[:,n]), '.-', label='n={}'.format(n))
plt.legend(loc=0, fontsize=6)
plt.title('R0c')
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
for n in range(axis_nmax_plus_1):
   plt.plot(iteration, np.abs(Z0s[:,n]), '.-', label='n={}'.format(n))
plt.yscale('log')
plt.legend(loc=0, fontsize=6)
plt.title('Z0s')
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
plt.plot(iteration, iota, '.-')
plt.title('iota')
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
plt.semilogy(iteration, B20_variation, '.-')
plt.title('B20 variation')
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
plt.plot(iteration, r_singularity, '.-')
plt.title('r_singularity')
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
plt.plot(iteration, L_grad_B, '.-', label=r'$L\nabla B$')
plt.plot(iteration, L_grad_grad_B, '.-', label=r'$L\nabla \nabla B$')
plt.legend(loc=0, fontsize=6)
plt.xlabel('iteration', labelpad=labelpad)

plt.subplot(nrows, ncols, plotnum); plotnum += 1
plt.plot(iteration, d2_volume_d_psi2, '.-')
plt.title("V''")
plt.xlabel('iteration', labelpad=labelpad)


plt.figtext(0.5, 0.99, 'Data: ' + os.path.abspath(filename), ha='center', va='top', fontsize=6)
plt.figtext(0.5, 0.01, 'Plot generated by ' + os.path.abspath(__file__), ha='center', va='bottom', fontsize=6)

plt.tight_layout()

plt.subplot(nrows, ncols, 1)
plt.semilogy(iteration, B20_term, '.-', label='B20 term')
plt.plot(iteration, iota_term, '.-', label='iota term')
plt.plot(iteration, R0_term, '.-', label='R0 term')
plt.plot(iteration, d2_volume_d_psi2_term, '.-', label='d2_volume_d_psi2 term')
plt.plot(iteration, XY2_term, '.-', label='XY2 term')
plt.plot(iteration, XY2Prime_term, '.-', label='XY2Prime term')
plt.plot(iteration, XY3_term, '.-', label='XY3 term')
plt.plot(iteration, XY3Prime_term, '.-', label='XY3Prime term')
plt.plot(iteration, grad_grad_B_term, '.-', label='grad_grad_B term')
plt.semilogy(iteration, objective_function, ':k', label='total')
plt.xlabel('iteration', labelpad=labelpad)
plt.legend(loc='upper left', fontsize=6, bbox_to_anchor=(1.01, 1))


plt.show()
